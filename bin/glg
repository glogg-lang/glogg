#!/usr/bin/env node

import * as process from "node:process";
import path from "node:path";
import * as fs from "node:fs";
import * as childProcess from "node:child_process";
import * as glogDb from "#src/db";
import * as persistence from "#src/persistence";
import * as codegen from "#src/codegen";

const cmd = process.argv[2];

async function init() {
  const [dbExists, dbPath] = getDbPath();

  if (dbExists) {
    console.log("Database already exists at: " + dbPath);
    return;
  }

  await glogDb.setup(dbPath);
}

async function edit() {
  const [dbExists, dbPath] = getDbPath();

  if (!dbExists) {
    console.log("No database found, cannot start edit.");
    return;
  }

  const editor = process.env["EDITOR"];

  if (!editor) {
    console.log(
      "No editor set. Please define your preferred text editor by seeting the EDTIOR environment variable.",
    );
    return;
  }

  const store = await glogDb.setup(dbPath);

  try {
    const draftPath = path.join(process.cwd(), "draft.glogg");

    const existingCode = await persistence.load(store);
    fs.writeFileSync(draftPath, existingCode, { encoding: "utf-8" });

    childProcess.spawnSync(editor, [draftPath], { stdio: "inherit" });

    const writtenCode = fs.readFileSync(draftPath, { encoding: "utf-8" });

    if (writtenCode.trim() !== existingCode.trim()) {
      const tmpPath = dbPath + '.tmp';
      const tmpStore = await glogDb.setup(tmpPath);

      await persistence.save(tmpStore, writtenCode);

      store.close();
      tmpStore.close();

      fs.rmSync(dbPath)
      fs.renameSync(tmpPath, dbPath)
    } else {
      store.close();
    }

    fs.rmSync(draftPath);
  } catch (e) {
    console.error(e);
  }
}

async function make() {
  const [dbExists, dbPath] = getDbPath();

  if (!dbExists) {
    console.log("No database found, cannot start edit.");
    return;
  }

  const store = await glogDb.setup(dbPath);

  try {
    const code = await codegen.make(store);

    const bundlePath = path.join(process.cwd(), "app.js");

    fs.writeFileSync(bundlePath, code, { encoding: "utf-8" });
  } catch (e) {
    console.error(e);
  } finally {
    store.close();
  }
}

function getDbPath() {
  const dbPath = path.join(process.cwd(), "app.glogg.db");
  const exists = fs.existsSync(dbPath);

  return [exists, dbPath];
}

async function gitInit() {
  const gitPath = path.join(process.cwd(), ".git");
  if (!fs.existsSync(gitPath)) {
    console.log("No git repo initialized!");
    return;
  }

  // TODO: check if files already contain these lines
  fs.appendFileSync(
    path.join(gitPath, "info/attributes"),
    "*.glogg.db diff=glogg",
  );
  fs.appendFileSync(
    path.join(gitPath, "config"),
    '[diff "glogg"]\n    command="glogg git diff"',
  );
}

async function diff() {
  const currentPath = process.argv[4];
  const targetPath = process.argv[5];

  const currentDb = await glogDb.setup(currentPath);
  const targetDb = await glogDb.setup(targetPath);

  const currentAst = (await persistence.load(currentDb)).trim();
  const targetAst = (await persistence.load(targetDb)).trim();

  console.log("");

  if (currentAst == null || currentAst.length === 0) {
    console.log("<EMPTY>");
  } else {
    console.log(currentAst);
  }

  console.log("\n---\n");

  if (targetAst == null || targetAst.length === 0) {
    console.log("<EMPTY>");
  } else {
    console.log(targetAst);
  }

  console.log("");
}

switch (cmd) {
  case "init":
    init();
    break;

  case "edit":
    edit();
    break;

  case "make":
    make();
    break;

  case "git":
    const subcmd = process.argv[3];

    if (subcmd === "init") {
      gitInit();
    } else if (subcmd === "diff") {
      diff();
    } else {
      console.log("Unknown sub-command");
    }
    break;

  default:
    console.log(
      [
        "Welcome to the Gløgg language!",
        "Available commands: init, edit",
        "",
        "init: setup a new database",
        "edit: edit contents of a database",
        "git init: teach git how to diff gløgg code",
      ].join("\n"),
    );
}
