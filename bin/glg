#!/usr/bin/env node

import process from "node:process";
import path from "node:path";
import fs from "node:fs";
import childProcess from "node:child_process";
import * as glogg from "glogg-lang";
import * as glogDb from "#src/db";
import * as persistence from "#src/persistence";
import * as codegen from "#src/codegen";

const cmd = process.argv[2];

async function init() {
  const [dbExists, dbPath] = glogg.getDbPath();

  if (dbExists) {
    console.error("Database already exists at: " + dbPath);
    process.exitCode = 1;
    return;
  }

  await glogg.init(dbPath);
}

async function edit() {
  const [dbExists, dbPath] = glogg.getDbPath();

  if (!dbExists) {
    console.error("No database found, start a new database with `glg init`.");
    process.exitCode = 1;
    return;
  }

  const editOpts = {};

  if (process.argv[3] === "--from=stdin" && process.stdin) {
    editOpts.code = fs.readFileSync(process.stdin.fd, "utf8");
  } else {
    const editor = process.env["EDITOR"];

    if (!editor) {
      console.error(
        "No editor set. Please define your preferred text editor by seeting the EDTIOR environment variable.",
      );
      process.exitCode = 1;
      return;
    }

    editOpts.editor = editor;
  }

  try {
    await glogg.edit(dbPath, editOpts);
  } catch (e) {
    console.error(e);
    process.exitCode = 1;
  }
}

async function make() {
  const [dbExists, dbPath] = glogg.getDbPath();

  if (!dbExists) {
    console.error("No database found, cannot start edit.");
    process.exitCode = 1;
    return;
  }

  try {
    const code = await glogg.make(dbPath);

    const bundlePath = path.join(path.dirname(dbPath), "app.js");
    fs.writeFileSync(bundlePath, code, { encoding: "utf8" });
  } catch (e) {
    console.error(e);
    process.exitCode = 1;
  }
}

async function addIntegration(contextPrefix, importName) {
  const [dbExists, dbPath] = glogg.getDbPath();

  if (!dbExists) {
    console.error("No database found, cannot add integration.");
    process.exitCode = 1;
    return;
  }

  try {
    await glogg.addIntegration(dbPath, contextPrefix, importName);
  } catch (e) {
    console.error(e);
    process.exitCode = 1;
  }
}

async function gitInit() {
  const gitPath = path.join(process.cwd(), ".git");
  if (!fs.existsSync(gitPath)) {
    console.error("No git repo initialized!");
    process.exitCode = 1;
    return;
  }

  // TODO: check if files already contain these lines
  fs.appendFileSync(
    path.join(gitPath, "info/attributes"),
    "*.glogg.db diff=glogg",
  );
  fs.appendFileSync(
    path.join(gitPath, "config"),
    '[diff "glogg"]\n    command="glg git diff"',
  );
}

async function diff() {
  const currentPath = process.argv[4];
  const targetPath = process.argv[5];

  const currentDb = await glogDb.setup(currentPath);
  const targetDb = await glogDb.setup(targetPath);

  const currentAst = (await persistence.load(currentDb)).trim();
  const targetAst = (await persistence.load(targetDb)).trim();

  console.log("");

  if (currentAst == null || currentAst.length === 0) {
    console.log("<EMPTY>");
  } else {
    console.log(currentAst);
  }

  console.log("\n---\n");

  if (targetAst == null || targetAst.length === 0) {
    console.log("<EMPTY>");
  } else {
    console.log(targetAst);
  }

  console.log("");
}

switch (cmd) {
  case "init":
    init();
    break;

  case "edit":
    edit();
    break;

  case "make":
    make();
    break;

  case "integration":
    addIntegration(process.argv[3], process.argv[4]);
    break;

  case "git":
    const subcmd = process.argv[3];

    if (subcmd === "init") {
      gitInit();
    } else if (subcmd === "diff") {
      diff();
    } else {
      console.error("Unknown sub-command");
      process.exitCode = 1;
    }
    break;

  default:
    console.log(
      [
        "Welcome to the Gløgg language!",
        "Available commands:",
        "",
        "init: setup a new database",
        "edit: edit contents of a database",
        "make: compile the program into a runnable executable",
        "add-integration: add a new integration",
        "git init: teach git how to diff gløgg code",
      ].join("\n"),
    );
}
